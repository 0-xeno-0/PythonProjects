1.File organizer - Write a Python program that organizes files in a specified directory based on their extension. For example, all .txt files will be moved to a "Text Files" folder, all .mp3 files to a "Music" folder, etc.
=>
import os
import shutil

# Dictionary of file extensions and their corresponding directories
file_extension_mapping = {
    '.txt': 'Text Files',
    '.mp3': 'Music',
    # Add more file extensions and directories as needed
}

# Path of the directory containing the files to be organized
directory_path = '/path/to/your/directory'

# Loop through all files in the directory
for filename in os.listdir(directory_path):
    # Get the file extension
    extension = os.path.splitext(filename)[1]
    
    # Check if the extension exists in the mapping
    if extension in file_extension_mapping:
        # Get the corresponding directory
        directory = file_extension_mapping[extension]
        
        # Create the directory if it doesn't exist
        if not os.path.exists(directory):
            os.makedirs(directory)
        
        # Move the file to the directory
        shutil.move(os.path.join(directory_path, filename), os.path.join(directory, filename))



2.Password generator - Write a Python program that generates random passwords of a specified length and complexity.
=>
import random
import string

def generate_password(length, complexity):
    # Determine which characters to use based on the complexity
    if complexity == 1:
        # Only use lowercase letters
        characters = string.ascii_lowercase
    elif complexity == 2:
        # Use lowercase and uppercase letters
        characters = string.ascii_letters
    elif complexity == 3:
        # Use lowercase and uppercase letters, as well as digits
        characters = string.ascii_letters + string.digits
    else:
        # Use lowercase and uppercase letters, digits, and punctuation
        characters = string.ascii_letters + string.digits + string.punctuation
    
    # Generate the password by selecting random characters from the chosen set
    password = ''.join(random.choice(characters) for i in range(length))
    
    return password

# Example usage: generate a 10-character password with complexity level 3
password = generate_password(10, 3)
print(password)




3.Currency converter - Write a Python program that converts between different currencies using exchange rates from an online API.
=>
import requests

# Function to get the exchange rate between two currencies from the API
def get_exchange_rate(from_currency, to_currency):
    url = f"https://api.exchangeratesapi.io/latest?base={from_currency}&symbols={to_currency}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        exchange_rate = data['rates'][to_currency]
        return exchange_rate
    else:
        return None

# Function to convert an amount from one currency to another
def convert_currency(amount, from_currency, to_currency):
    exchange_rate = get_exchange_rate(from_currency, to_currency)
    if exchange_rate:
        converted_amount = amount * exchange_rate
        return converted_amount
    else:
        return None

# Example usage: convert 100 USD to EUR
amount = 100
from_currency = 'USD'
to_currency = 'EUR'
converted_amount = convert_currency(amount, from_currency, to_currency)
if converted_amount:
    print(f"{amount} {from_currency} = {converted_amount} {to_currency}")
else:
    print("Error: unable to convert currency")




4.Web scraper - Write a Python program that extracts data from a website and saves it to a CSV file. For example, you could scrape the top 100 movies on IMDB and save their titles, ratings, and release dates to a CSV file.
=>
import requests
from bs4 import BeautifulSoup
import csv

# Function to extract movie data from the IMDB top 100 movies page
def extract_movies():
    url = "https://www.imdb.com/chart/top/"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    movie_table = soup.find('table', {'class': 'chart full-width'})
    movie_rows = movie_table.tbody.find_all('tr')

    movies = []
    for row in movie_rows:
        title = row.find('td', {'class': 'titleColumn'}).a.text
        year = row.find('span', {'class': 'secondaryInfo'}).text.strip('()')
        rating = row.find('td', {'class': 'ratingColumn'}).strong.text
        movies.append((title, year, rating))

    return movies

# Function to save movie data to a CSV file
def save_movies_to_csv(movies, filename):
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Title', 'Year', 'Rating'])
        for movie in movies:
            writer.writerow(movie)

# Example usage: extract top 100 movies from IMDB and save to a CSV file
movies = extract_movies()
filename = 'top_100_movies.csv'
save_movies_to_csv(movies, filename)




5.Email sender - Write a Python program that sends emails to a list of recipients. You could use this to send out newsletters, updates, or other messages to a large group of people.
=>
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Email information
smtp_server = "smtp.gmail.com"
smtp_port = 587
smtp_username = "your-email@gmail.com" # replace with your email address
smtp_password = "your-password" # replace with your email password

# List of email recipients
to_list = ["recipient1@example.com", "recipient2@example.com", "recipient3@example.com"]

# Email message
subject = "Test email"
body = "This is a test email sent using Python."

# Create the email message
msg = MIMEMultipart()
msg['Subject'] = subject
msg.attach(MIMEText(body, 'plain'))

# Connect to the SMTP server
server = smtplib.SMTP(smtp_server, smtp_port)
server.starttls()
server.login(smtp_username, smtp_password)

# Send the email to each recipient in the list
for to_addr in to_list:
    msg['To'] = to_addr
    server.sendmail(smtp_username, to_addr, msg.as_string())

# Disconnect from the SMTP server
server.quit()

print("Emails sent successfully!")




6.Image resizer - Write a Python program that resizes images in a specified directory to a specified size.
=>
from PIL import Image
import os

# Path to directory containing images to resize
input_dir = '/path/to/input/directory'

# Path to directory to save resized images
output_dir = '/path/to/output/directory'

# Desired size of resized images
size = (800, 600)

# Loop through each image file in the input directory
for filename in os.listdir(input_dir):
    # Check if the file is an image file
    if filename.endswith('.jpg') or filename.endswith('.jpeg') or filename.endswith('.png'):
        # Open the image file
        with Image.open(os.path.join(input_dir, filename)) as img:
            # Resize the image
            img.thumbnail(size)
            # Save the resized image to the output directory
            img.save(os.path.join(output_dir, filename))
            print(f'Resized {filename} to {size}')




7.Text editor - Write a simple text editor using Python's Tkinter library.
=>
import tkinter as tk
from tkinter import filedialog

class TextEditor:
    def __init__(self, master):
        self.master = master
        master.title('Text Editor')
        
        # Create text box widget
        self.text_box = tk.Text(master, height=30, width=80)
        self.text_box.pack()
        
        # Create menu bar
        self.menu_bar = tk.Menu(master)
        
        # Create File menu
        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.file_menu.add_command(label='Open', command=self.open_file)
        self.file_menu.add_command(label='Save', command=self.save_file)
        self.file_menu.add_separator()
        self.file_menu.add_command(label='Exit', command=master.quit)
        self.menu_bar.add_cascade(label='File', menu=self.file_menu)
        
        # Create Edit menu
        self.edit_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.edit_menu.add_command(label='Cut', command=self.cut)
        self.edit_menu.add_command(label='Copy', command=self.copy)
        self.edit_menu.add_command(label='Paste', command=self.paste)
        self.menu_bar.add_cascade(label='Edit', menu=self.edit_menu)
        
        # Attach menu bar to master window
        master.config(menu=self.menu_bar)
    
    def open_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            with open(file_path, 'r') as f:
                self.text_box.delete(1.0, tk.END)
                self.text_box.insert(tk.END, f.read())
    
    def save_file(self):
        file_path = filedialog.asksaveasfilename()
        if file_path:
            with open(file_path, 'w') as f:
                f.write(self.text_box.get(1.0, tk.END))
    
    def cut(self):
        self.text_box.event_generate('<<Cut>>')
    
    def copy(self):
        self.text_box.event_generate('<<Copy>>')
    
    def paste(self):
        self.text_box.event_generate('<<Paste>>')

root = tk.Tk()
app = TextEditor(root)
root.mainloop()




8.Chatbot - Write a Python program that can answer questions, provide information, or perform tasks based on user input.
=>
import pyttsx3
import speech_recognition as sr
import datetime
import wikipedia

# Initialize text-to-speech engine
engine = pyttsx3.init()

# Set voice properties
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)  # Change voice index to change voice

# Define a function to speak text
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Define a function to recognize speech
def recognize_speech():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print('Listening...')
        audio = r.listen(source)

        try:
            print('Recognizing...')
            query = r.recognize_google(audio)
            print(f'User said: {query}\n')
        except Exception as e:
            print('Sorry, I did not understand. Please try again...')
            query = None

    return query

# Greet the user
speak('Hello, I am your personal assistant. How can I help you?')

# Run the main loop
while True:
    # Get user input
    query = recognize_speech()

    # Process user input
    if query:
        # Get current time
        if 'what time is it' in query:
            now = datetime.datetime.now().strftime('%H:%M:%S')
            speak(f'The current time is {now}')

        # Get information from Wikipedia
        elif 'wikipedia' in query:
            speak('Searching Wikipedia...')
            query = query.replace('wikipedia', '')
            results = wikipedia.summary(query, sentences=2)
            speak('According to Wikipedia...')
            speak(results)

        # Exit program
        elif 'exit' in query:
            speak('Goodbye!')
            break

        # Unrecognized command
        else:
            speak('I am sorry, I do not understand your request.')




9.Calculator - Write a Python program that performs basic arithmetic operations (addition, subtraction, multiplication, division) on user input.
=>
# Define a function to perform arithmetic operations
def perform_operation(num1, num2, op):
    if op == '+':
        return num1 + num2
    elif op == '-':
        return num1 - num2
    elif op == '*':
        return num1 * num2
    elif op == '/':
        return num1 / num2
    else:
        return None

# Get user input
num1 = float(input('Enter first number: '))
num2 = float(input('Enter second number: '))
op = input('Enter operator (+, -, *, /): ')

# Perform arithmetic operation
result = perform_operation(num1, num2, op)

# Print result
if result is None:
    print('Invalid operator')
else:
    print(f'{num1} {op} {num2} = {result}')




10.Data analysis - Write a Python program that reads in data from a CSV file and performs some analysis on it. For example, you could calculate the mean and standard deviation of a set of data, or plot a graph of the data using matplotlib.
=>
import csv
import statistics

# Read in data from CSV file
with open('data.csv') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    data = []
    for row in csv_reader:
        data.append(float(row[0]))

# Calculate mean and standard deviation
mean = statistics.mean(data)
stdev = statistics.stdev(data)

# Print results
print(f'Mean: {mean}')
print(f'Standard deviation: {stdev}')


